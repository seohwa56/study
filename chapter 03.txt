chapter 03

3.1 자바스크립트 실행 환경

모든 브라우저는 자바스크립트를 해석/실행 할수 있는 엔진 있음
주의할점 브라우저와 Node.js는 용도가 다름

브라우저
html,css,자바스크립트실행 -> 웹 페이지 렌더링
파싱된 html 요소 선택/조작하는 기능의 집합인 DOM API 제공
파일 생성/수정 안됨 -> 사용자의 컴퓨터에서 작동되기때문
클라이언트 사이드 Web API 지원

Node.js
브라우저 외부에서 자바스크립트를 실행
DOM API 제공안함
파일 생성/수정가능
클라이언트 사이드 Web API 지원안함 -> ECMA스크립트와 노드js 고유 API 지원

ECMA스크립트 외에 추가기능 호환 안됨

웹 크롤링
서버에서 웹사이트의 콘텐츠를 수집하기 위해 웹사이트에서 html 문서를 가져온 다음 이를 가공해서 필요한 데이터만 추출

3.2 웹 브라우저
3.2.1 개발자 도구

크롬브라우저 -> 개발자도구(윈도우 f12/맥 커맨드옵션I) -> 웹 개발에 필수

개발자도구

elements DOM,CSS를 편집해서 확인 -> 저장안됨
console 에러확인, console.log 메서드 실행확인
sources 코드 디버깅
network 네트워크 요청정보와 성능확인
application 웹스토리지 세션 쿠키 확인

3.2.2 콘솔
자바스크립트 코드 에러발생시 제일 먼저 확인해야 하는 곳
구현단계에서 에러가 빈번하므로 열어놓고 개발하는 것이 좋음
간편하게 코드 실행결과르 확인하기 좋음

console.log(...)
소괄호안의 코드를 평가해서 결과를 출력
자바스크립트 코드를 직접입력해서 사용가능(REPL: Read Eval Print Loop 입력 수행 출력 반복)
코드 줄바꿈이 필요한 경우 shift+엔터

3.2.3 브라우저에서 자바스크립트 실행

브라우저는 html 파일을 로드하면 스크립트 코드를 실행
자바스크립트 코드 내에서 console.log 메서드 호출시 콘솔에 실행결과 출력

3.2.4 디버깅

개발자도구 sources 패널로 이동 -> 에러메세지 확인하고 에러가 발생한 원인을 제거하는것


3.3 Node.js

프로젝트의 규모가 커짐에 따라 react,angular,lodash 같은 프레임워크나 라이브러리를 사용하거나 babel, webpack eslint등 여러가지 도구를 사용할 필요가 있음
이때 Node. js와 npm이 필요하다

Node.js -> 브라우저 이외의 환경에서 동작시킬수 있음
npm -> Node.js에서 사용할수 있는 모듈을 패키지화해서 모아둔 저장소 역활과 패키지 설치 및 관리

Node.js 설치
홈페이지

REPL(Read Eval Print Loop)를 사용해 자바스크립트 코드를 실행해 결과확인

터미널 -> 명령어
$ node

프롬프트가 > 변경괴면 자바스크립트 코드를 실행해볼수 있다.

3.4 비주얼 스튜디오 코드
설치 -> 홈페이지

3.4.2 내장터미널
vscode 실행 -> ctrl+` (단축키) -> node{파일명}
자바스크립트 파일 실행

3.4.3 code runner 확장플러그인

code runner 확장플러그인을 설치하면 vs code의 내장터미널에서 단축키를 사용해 다양한 프로그래밍 언어로 구현된 소스코드를 간단히 실행할수 있다.

단축키
윈도우 ctrl alt n
맥 control^ option n


3.3.4 live server 확장 플러그인

live server 확장플러그인을 사용하면 소스코드 수정시 브라우저에 자동으로 반영